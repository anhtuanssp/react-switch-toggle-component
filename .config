'use strict';

let path = require('path');
const PATHS = {
    app: path.join(__dirname, './src'),
};
var coverage;
var reporters;
if (process.env.CONTINUOUS_INTEGRATION) {
    coverage = {
        type: 'lcov',
        dir: 'coverage/'
    };
    reporters = ['coverage', 'coveralls'];
} else {
    coverage = {
        type: 'html',
        dir: 'coverage/'
    };
    reporters = ['progress', 'coverage'];
}

var webpack = require('webpack');

module.exports = function(config) {
    config.set({
        browsers: ['Firefox'],
        browserNoActivityTimeout: 30000,
        frameworks: ['jasmine'],
        files: ['test/**/*.js'],
        preprocessors: { 'test/**/*.js': ['webpack', 'sourcemap'] },
        reporters: reporters,
        coverageReporter: coverage,
        webpack: {
            devtool: 'inline-source-map',
            module: {
                loaders: [
                    // TODO: fix sourcemaps
                    // see: https://github.com/deepsweet/isparta-loader/issues/1
                    {
                        test: /\.js$|.jsx$/,
                        loader: 'babel',
                        exclude: /node_modules/
                    }, {
                        test: /\.js$|.jsx$/,
                        loader: 'isparta?{babel: {stage: 1}}',
                        include: path.resolve('app'),
                        exclude: /node_modules|test|utils/
                    }, {
                        test: /\.json$/,
                        loader: 'json'
                    },{
                    test: /\.scss/,
                    loaders: ['style', 'css?sourceMap', 'sass?sourceMap']
                }
                ]
            },
            plugins: [
                new webpack.DefinePlugin({
                    'process.env': {
                        BROWSER: JSON.stringify(true),
                        NODE_ENV: JSON.stringify('test')
                    }
                })
            ],
            resolve: {
                extensions: ['', '.js', '.jsx'],
                alias: {
                    app: PATHS.app
                }
            },
            externals: {
                'react/lib/ExecutionEnvironment': true,
                'react/lib/ReactContext': 'window',
                'cheerio': 'window',
            }
        },
        webpackServer: {
            noInfo: true
        }
    });
};
